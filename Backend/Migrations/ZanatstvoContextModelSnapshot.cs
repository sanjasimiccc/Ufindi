// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebTemplate.Models;

#nullable disable

namespace WebTemplate.Migrations
{
    [DbContext(typeof(ZanatstvoContext))]
    partial class ZanatstvoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MajstorOglas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("MajstorId")
                        .HasColumnType("int");

                    b.Property<int>("OglasID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MajstorId");

                    b.HasIndex("OglasID");

                    b.ToTable("MajstoriOglasi");
                });

            modelBuilder.Entity("Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChatRoom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Models.Grad", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Admin_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City_ascii")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Gradovi");
                });

            modelBuilder.Entity("Models.Identitet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.ToTable("Identiteti");
                });

            modelBuilder.Entity("Models.Kalendar", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("KrajnjiDatumi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KrajnjiDatumiUgovora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PocetniDatumi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PocetniDatumiUgovora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Kalendari");
                });

            modelBuilder.Entity("Models.Korisnik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("GradID")
                        .HasColumnType("int");

                    b.Property<int>("IdentitetID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Povezani")
                        .HasColumnType("int");

                    b.Property<float?>("ProsecnaOcena")
                        .HasColumnType("real");

                    b.Property<string>("Slika")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GradID");

                    b.HasIndex("IdentitetID");

                    b.ToTable("Korisnici");
                });

            modelBuilder.Entity("Models.Majstor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GrupaID")
                        .HasColumnType("int");

                    b.Property<int>("KalendarID")
                        .HasColumnType("int");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<string>("ListaVestina")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VodjaGrupe")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("GrupaID");

                    b.HasIndex("KalendarID");

                    b.HasIndex("KorisnikID");

                    b.ToTable("Majstori");
                });

            modelBuilder.Entity("Models.Oglas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<float>("CenaPoSatu")
                        .HasColumnType("real");

                    b.Property<DateTime>("DatumPostavljanja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumZavrsetka")
                        .HasColumnType("datetime2");

                    b.Property<string>("ListaSlika")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListaVestina")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PoslodavacID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PoslodavacID");

                    b.ToTable("Oglasi");
                });

            modelBuilder.Entity("Models.Poslodavac", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KorisnikID");

                    b.ToTable("Poslodavci");
                });

            modelBuilder.Entity("Models.Recenzija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DavalacID")
                        .HasColumnType("int");

                    b.Property<string>("ListaSlika")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ocena")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrimalacID")
                        .HasColumnType("int");

                    b.Property<int>("UgovorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DavalacID");

                    b.HasIndex("PrimalacID");

                    b.HasIndex("UgovorID");

                    b.ToTable("Recenzije");
                });

            modelBuilder.Entity("Models.Ugovor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<float>("CenaPoSatu")
                        .HasColumnType("real");

                    b.Property<DateTime>("DatumPocetka")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumZavrsetka")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImeMajstora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImePoslodavca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MajstorID")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PoslodavacID")
                        .HasColumnType("int");

                    b.Property<string>("PotpisMajstora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PotpisPoslodavca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZahtevZaPosaoID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MajstorID");

                    b.HasIndex("PoslodavacID");

                    b.HasIndex("ZahtevZaPosaoID");

                    b.ToTable("Ugovori");
                });

            modelBuilder.Entity("Models.ZahtevZaGrupu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("MajstorPosiljalacID")
                        .HasColumnType("int");

                    b.Property<int>("MajstorPrimalacID")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Prihvacen")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MajstorPosiljalacID");

                    b.HasIndex("MajstorPrimalacID");

                    b.ToTable("ZahteviZaGrupu");
                });

            modelBuilder.Entity("Models.ZahtevZaPosao", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<float>("CenaPoSatu")
                        .HasColumnType("real");

                    b.Property<DateTime>("DatumZavrsetka")
                        .HasColumnType("datetime2");

                    b.Property<string>("ListaSlika")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MajstorID")
                        .HasColumnType("int");

                    b.Property<int?>("OglasID")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PoslodavacID")
                        .HasColumnType("int");

                    b.Property<int>("Prihvacen")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MajstorID");

                    b.HasIndex("OglasID");

                    b.HasIndex("PoslodavacID");

                    b.ToTable("ZahteviZaPosao");
                });

            modelBuilder.Entity("MajstorOglas", b =>
                {
                    b.HasOne("Models.Majstor", "Majstor")
                        .WithMany("MajstoriOglas")
                        .HasForeignKey("MajstorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Oglas", "Oglas")
                        .WithMany("OglasiMajstor")
                        .HasForeignKey("OglasID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Majstor");

                    b.Navigation("Oglas");
                });

            modelBuilder.Entity("Models.ChatMessage", b =>
                {
                    b.HasOne("Models.Korisnik", "Receiver")
                        .WithMany("ChatPrimljene")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Korisnik", "Sender")
                        .WithMany("ChatPoslate")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Models.Korisnik", b =>
                {
                    b.HasOne("Models.Grad", "Grad")
                        .WithMany()
                        .HasForeignKey("GradID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Identitet", "Identitet")
                        .WithMany()
                        .HasForeignKey("IdentitetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grad");

                    b.Navigation("Identitet");
                });

            modelBuilder.Entity("Models.Majstor", b =>
                {
                    b.HasOne("Models.Majstor", "Grupa")
                        .WithMany("Majstori")
                        .HasForeignKey("GrupaID");

                    b.HasOne("Models.Kalendar", "Kalendar")
                        .WithMany()
                        .HasForeignKey("KalendarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grupa");

                    b.Navigation("Kalendar");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("Models.Oglas", b =>
                {
                    b.HasOne("Models.Poslodavac", "Poslodavac")
                        .WithMany("Oglasi")
                        .HasForeignKey("PoslodavacID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poslodavac");
                });

            modelBuilder.Entity("Models.Poslodavac", b =>
                {
                    b.HasOne("Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("Models.Recenzija", b =>
                {
                    b.HasOne("Models.Korisnik", "Davalac")
                        .WithMany("PoslateRecenzije")
                        .HasForeignKey("DavalacID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Korisnik", "Primalac")
                        .WithMany("PrimljeneRecenzije")
                        .HasForeignKey("PrimalacID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Ugovor", "Ugovor")
                        .WithMany()
                        .HasForeignKey("UgovorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Davalac");

                    b.Navigation("Primalac");

                    b.Navigation("Ugovor");
                });

            modelBuilder.Entity("Models.Ugovor", b =>
                {
                    b.HasOne("Models.Majstor", "Majstor")
                        .WithMany("Ugovori")
                        .HasForeignKey("MajstorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Poslodavac", "Poslodavac")
                        .WithMany("Ugovori")
                        .HasForeignKey("PoslodavacID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.ZahtevZaPosao", "ZahtevZaPosao")
                        .WithMany()
                        .HasForeignKey("ZahtevZaPosaoID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Majstor");

                    b.Navigation("Poslodavac");

                    b.Navigation("ZahtevZaPosao");
                });

            modelBuilder.Entity("Models.ZahtevZaGrupu", b =>
                {
                    b.HasOne("Models.Majstor", "MajstorPosiljalac")
                        .WithMany("ZahteviGrupaPoslati")
                        .HasForeignKey("MajstorPosiljalacID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Majstor", "MajstorPrimalac")
                        .WithMany("ZahteviGrupaPrimljeni")
                        .HasForeignKey("MajstorPrimalacID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MajstorPosiljalac");

                    b.Navigation("MajstorPrimalac");
                });

            modelBuilder.Entity("Models.ZahtevZaPosao", b =>
                {
                    b.HasOne("Models.Majstor", "Majstor")
                        .WithMany("ZahteviPosao")
                        .HasForeignKey("MajstorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Oglas", "Oglas")
                        .WithMany()
                        .HasForeignKey("OglasID");

                    b.HasOne("Models.Poslodavac", "Poslodavac")
                        .WithMany("Zahtevi")
                        .HasForeignKey("PoslodavacID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Majstor");

                    b.Navigation("Oglas");

                    b.Navigation("Poslodavac");
                });

            modelBuilder.Entity("Models.Korisnik", b =>
                {
                    b.Navigation("ChatPoslate");

                    b.Navigation("ChatPrimljene");

                    b.Navigation("PoslateRecenzije");

                    b.Navigation("PrimljeneRecenzije");
                });

            modelBuilder.Entity("Models.Majstor", b =>
                {
                    b.Navigation("Majstori");

                    b.Navigation("MajstoriOglas");

                    b.Navigation("Ugovori");

                    b.Navigation("ZahteviGrupaPoslati");

                    b.Navigation("ZahteviGrupaPrimljeni");

                    b.Navigation("ZahteviPosao");
                });

            modelBuilder.Entity("Models.Oglas", b =>
                {
                    b.Navigation("OglasiMajstor");
                });

            modelBuilder.Entity("Models.Poslodavac", b =>
                {
                    b.Navigation("Oglasi");

                    b.Navigation("Ugovori");

                    b.Navigation("Zahtevi");
                });
#pragma warning restore 612, 618
        }
    }
}
